/**
\mainpage FInite State Automata Documentation

<h2>Overview</h2>

<div>Library that allows the modeling and the simulation of automata or concurrent systems. There is no limitation in the number of states and transitions that can be used to build a machine. Machines created match closely the specifications of "State Machines" as described in SysML. Provide consistency information such as multiple transitions firing from the same state.</div>
<h3>Machine:</h3>
<list>
  <item>A machine is made of many regions. A region is where states and transitions are programmed. The regions in the machine or in "CompositeState" states are concurrent and only one transition can be fired in a region.</item>
</list>
<h3>States:</h3>
<list>
  <item>"SimpleState" to program an irreducible state in a region. </item>	
  <item>"InitialState" to program a pseudostate indacating the beginning of a region.</item>
  <item>"FinalState" to program a pseudostate indicating the ending of a region.</item>
  <item>"TerminateState" to program a pseudostate indicating the termination of the machine execution.</item>
    <item>"CompositeState" to program a state in a region and that can have regions inside it.</item>
</list>
<h3>Events:</h3>
<list>
  <item>"ChangeEvent" to implement a transition triggering by changes of attribute values.</item>
  <item>"TimeEvent" to implement a transition triggering by the passing of a time duration or the reaching of an absolute time.</item>
</list>
<h3>Transitions:</h3>
<list>
  <item>"Transition" to program a transition between two states of the machine.</item>
  <item>"ForkTransition" to program a transition from a state and states in a composite state.</item>
  <item>"JoinTransition" to program a transition from states in a composite state and a state.</item>
</list>

<h2>Installation</h2>
<h3>Requirements</h3>
To compile and install the FISA library, the CMake (\p http://www.cmake.org) building system is required. It is also necessary that the compiler provides c++11 smart pointers. Currently, support of "TimeEvent" events is available only with a GCC compiler.
<h3>Tuning</h3>
The option "WARNING" in the CMakeLists.txt file allows the printing of consistency information.
<h3>Under Linux</h3>
To keep the project sources tree clean, create a directory named "build" at the root of the project directory and type, in the "build" directory, the following instructions in a command interpreter:
<list>
  <item>cmake -DCMAKE_INSTALL_PREFIX="destination path" ..</item>
  <item>make</item>
  <item>make install</item>
</list>
Don't forget the TWO DOT at the end of the first line and replace "destination path" (with quotes) by an existing directory. The examples are put in the subdirectory "bin" of the "destination path", the static library in "lib" and the headers in "include".

<h3>Documentation</h3>
Unzip the "html.zip" file inside the "docs" directory. The documentation in HTML start from the file "index.html" inside the "html" directory previously created. It is possible to rebuild the documentation with Doxygen (\p http://www.doxygen.org) by typing "doxygen Doxyfile" in the directory "docs".

<h2>Tutorials</h2>

<h3>Example 1</h3>

Creation of a machine that command a lamp by using with "InitialState" "SimpleState" states, "ChangeEvent" events and "Transition" transitions.

<img src="../pics/example_lamp1.jpeg" alt="example" title="" />

\dontinclude example_lamp1.cpp
\skip include
\until // That's all!

<h3>Example 2</h3>

Creation of a machine by using "InitialState" "FinalState" "SimpleState" "CompositeState" states, "ChangeEvent" events and, "Transition" "JoinTransition" "ForkTransition" transition.  

<img src="../pics/example_machine1.jpeg" alt="example" title="" />

\dontinclude example_machine1.cpp
\skip include
\until // That's all!

<h3>Example 3</h3>

Creation of a machine that automatically command a lamp by using with "InitialState" "SimpleState" states, "TimeEvent" events and "Transition" transitions.

<img src="../pics/example_lamp2.jpeg" alt="example" title="" />

\dontinclude example_lamp2.cpp
\skip include
\until // That's all!

<h2>Licensing</h2>
\verbatim
FInite State Automata library                                                     

Copyright (c), Jean Ahmad (https://www.linkedin.com/in/jeanahmad)
All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:                     

- Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.                                  

- Redistributions in binary form must reproduce the above copyright notice, this
list of conditions and the following disclaimer in the documentation and/or
other materials provided with the distribution.                                   

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
\endverbatim

<h2>Contacts</h2>
Join me on linkedin (\p https://www.linkedin.com/in/jeanahmad) to any inquiries or to give your impressions.


*/

